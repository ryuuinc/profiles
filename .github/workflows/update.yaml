name: Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 23 * * *'
  push:
    branches:
      - master
    paths-ignore:
      - '**/README.md'

jobs:
  build:
    name: Push
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "Custome_Apple=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list" >> $GITHUB_ENV
          echo "Custome_ChinaDomain=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list" >> $GITHUB_ENV
          echo "Custome_ChinaMedia=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list" >> $GITHUB_ENV
          echo "Custome_GoogleCN=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list" >> $GITHUB_ENV
          echo "Custome_GoogleFCM=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/GoogleFCM.list" >> $GITHUB_ENV
          echo "Custome_LocalAreaNetwork=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list" >> $GITHUB_ENV
          echo "Custome_Microsoft=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Microsoft.list" >> $GITHUB_ENV
          echo "Custome_ProxyLite=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyLite.list" >> $GITHUB_ENV
          echo "Custome_ProxyMedia=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list" >> $GITHUB_ENV
          echo "Custome_SteamCN=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/SteamCN.list" >> $GITHUB_ENV
          echo "Custome_Telegram=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list" >> $GITHUB_ENV
          echo "Custome_UnBan=https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/UnBan.list" >> $GITHUB_ENV
          echo "Custome_GEOIP=https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb" >> $GITHUB_ENV
          echo "Custome_Parser=https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js" >> $GITHUB_ENV
        shell: bash

      - name: Generate Apple file
        run: |
          curl -sS ${Custome_Apple} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > Apple.list
          echo "payload:" > Apple.yaml
          cat Apple.list | awk '{printf "  - %s\n", $0}' >> Apple.yaml

      - name: Generate ChinaDomain file
        run: |
          curl -sS ${Custome_ChinaDomain} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > ChinaDomain.list
          echo "payload:" > ChinaDomain.yaml
          cat ChinaDomain.list | awk '{printf "  - %s\n", $0}' >> ChinaDomain.yaml

      - name: Generate ChinaMedia file
        run: |
          curl -sS ${Custome_ChinaMedia} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > ChinaMedia.list
          echo "payload:" > ChinaMedia.yaml
          cat ChinaMedia.list | awk '{printf "  - %s\n", $0}' >> ChinaMedia.yaml

      - name: Generate GoogleCN file
        run: |
          curl -sS ${Custome_GoogleCN} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > GoogleCN.list
          echo "payload:" > GoogleCN.yaml
          cat GoogleCN.list | awk '{printf "  - %s\n", $0}' >> GoogleCN.yaml

      - name: Generate GoogleFCM file
        run: |
          curl -sS ${Custome_GoogleFCM} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > GoogleFCM.list
          echo "payload:" > GoogleFCM.yaml
          cat GoogleFCM.list | awk '{printf "  - %s\n", $0}' >> GoogleFCM.yaml

      - name: Generate LocalAreaNetwork file
        run: |
          curl -sS ${Custome_LocalAreaNetwork} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > LocalAreaNetwork.list
          echo "payload:" > LocalAreaNetwork.yaml
          cat LocalAreaNetwork.list | awk '{printf "  - %s\n", $0}' >> LocalAreaNetwork.yaml

      - name: Generate Microsoft file
        run: |
          curl -sS ${Custome_Microsoft} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > Microsoft.list
          echo "payload:" > Microsoft.yaml
          cat Microsoft.list | awk '{printf "  - %s\n", $0}' >> Microsoft.yaml

      - name: Generate ProxyLite file
        run: |
          curl -sS ${Custome_ProxyLite} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > ProxyLite.list
          echo "payload:" > ProxyLite.yaml
          cat ProxyLite.list | awk '{printf "  - %s\n", $0}' >> ProxyLite.yaml

      - name: Generate ProxyMedia file
        run: |
          curl -sS ${Custome_ProxyMedia} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > ProxyMedia.list
          echo "payload:" > ProxyMedia.yaml
          cat ProxyMedia.list | awk '{printf "  - %s\n", $0}' >> ProxyMedia.yaml

      - name: Generate SteamCN file
        run: |
          curl -sS ${Custome_SteamCN} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > SteamCN.list
          echo "payload:" > SteamCN.yaml
          cat SteamCN.list | awk '{printf "  - %s\n", $0}' >> SteamCN.yaml

      - name: Generate Telegram file
        run: |
          curl -sS ${Custome_Telegram} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > Telegram.list
          echo "payload:" > Telegram.yaml
          cat Telegram.list | awk '{printf "  - %s\n", $0}' >> Telegram.yaml

      - name: Generate UnBan file
        run: |
          curl -sS ${Custome_UnBan} | grep -v "^[#\s]" | grep -v "^[[:space:]]*$" > UnBan.list
          echo "payload:" > UnBan.yaml
          cat UnBan.list | awk '{printf "  - %s\n", $0}' >> UnBan.yaml

      - name: Generate GEOIP file
        run: |
          curl -sSO ${Custome_GEOIP}

      - name: Generate Parser file
        run: |
          curl -sS ${Custome_Parser} > resource-parser.js

      - name: Move files to publish directory
        run: |
          mkdir -p publish
          cp *.list *.yaml ./publish/

      - name: Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: |
            ./publish/*
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.RELEASE_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release
